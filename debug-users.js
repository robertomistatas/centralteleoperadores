/**
 * Script de diagn√≥stico para el m√≥dulo de Configuraci√≥n de Usuarios
 * Ejecutar en la consola del navegador para debugear el problema
 */

// Funci√≥n principal de diagn√≥stico
const diagnoseUserSystem = async () => {
  console.log('ü©∫ INICIANDO DIAGN√ìSTICO DEL SISTEMA DE USUARIOS');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar autenticaci√≥n
    console.log('üîê 1. VERIFICANDO AUTENTICACI√ìN...');
    const user = window.firebase?.auth?.currentUser;
    console.log('Usuario autenticado:', user?.email);
    console.log('UID:', user?.uid);
    
    // 2. Verificar permisos
    console.log('\nüëë 2. VERIFICANDO PERMISOS...');
    const isSuperAdmin = user?.email === 'roberto@mistatas.com';
    console.log('Es super admin:', isSuperAdmin);
    
    if (!isSuperAdmin) {
      console.log('‚ùå PROBLEMA: No tienes permisos de super admin');
      console.log('üí° SOLUCI√ìN: Inicia sesi√≥n con roberto@mistatas.com');
      return;
    }
    
    // 3. Verificar conexi√≥n a Firestore
    console.log('\nüî• 3. VERIFICANDO FIRESTORE...');
    
    // Intentar acceso directo a la colecci√≥n
    const db = window.firebase?.firestore?.();
    if (!db) {
      console.log('‚ùå PROBLEMA: Firestore no est√° disponible');
      return;
    }
    
    console.log('‚úÖ Firestore disponible');
    
    // 4. Intentar leer colecci√≥n userProfiles
    console.log('\nüìÑ 4. LEYENDO COLECCI√ìN userProfiles...');
    try {
      const querySnapshot = await db.collection('userProfiles').get();
      console.log('üìä Documentos encontrados:', querySnapshot.size);
      
      if (querySnapshot.size === 0) {
        console.log('‚ö†Ô∏è PROBLEMA: No hay usuarios en la colecci√≥n userProfiles');
        console.log('üí° POSIBLES CAUSAS:');
        console.log('   - Los usuarios est√°n en Firebase Auth pero no en Firestore');
        console.log('   - La colecci√≥n tiene otro nombre');
        console.log('   - Los usuarios no se crearon correctamente');
      } else {
        console.log('üìã USUARIOS ENCONTRADOS:');
        querySnapshot.forEach((doc) => {
          const data = doc.data();
          console.log(`   ‚Ä¢ ${data.email} (${data.role}) - Activo: ${data.isActive}`);
        });
      }
    } catch (error) {
      console.log('‚ùå ERROR accediendo a userProfiles:', error.message);
      console.log('üí° Probando con reglas m√°s permisivas...');
    }
    
    // 5. Verificar usuarios en Firebase Auth
    console.log('\nüë• 5. VERIFICANDO FIREBASE AUTH...');
    try {
      // Esto requiere permisos especiales, pero podemos ver el usuario actual
      console.log('Usuario en Auth:', user?.email);
      console.log('Metadata:', {
        creationTime: user?.metadata?.creationTime,
        lastSignInTime: user?.metadata?.lastSignInTime
      });
    } catch (error) {
      console.log('‚ùå ERROR verificando Auth:', error.message);
    }
    
    // 6. Verificar reglas de Firestore
    console.log('\nüõ°Ô∏è 6. RECOMENDACIONES PARA REGLAS DE FIRESTORE:');
    console.log('Para el super admin, las reglas deber√≠an permitir acceso total:');
    console.log(`
// En firestore.rules
match /userProfiles/{userId} {
  allow read, write, create, update, delete: if request.auth.token.email == 'roberto@mistatas.com';
}
    `);
    
    // 7. Crear usuario de prueba si no existen
    console.log('\nüß™ 7. FUNCI√ìN DE PRUEBA DISPONIBLE:');
    console.log('Ejecuta createTestUser() para crear un usuario de prueba');
    
  } catch (error) {
    console.error('‚ùå ERROR GENERAL:', error);
  }
};

// Funci√≥n para crear usuario de prueba
const createTestUser = async () => {
  console.log('üß™ Creando usuario de prueba...');
  
  try {
    const db = window.firebase?.firestore?.();
    const auth = window.firebase?.auth;
    
    if (!db || !auth) {
      console.log('‚ùå Firebase no disponible');
      return;
    }
    
    // Crear en Firestore directamente
    const testUserData = {
      uid: 'test-javiera-123',
      email: 'reyesalvarodjaviera@gmail.com',
      displayName: 'Javiera Reyes Alvarado',
      role: 'teleoperadora',
      isActive: true,
      createdAt: new Date(),
      createdBy: auth.currentUser?.uid,
      lastLogin: null
    };
    
    await db.collection('userProfiles').doc('test-javiera-123').set(testUserData);
    console.log('‚úÖ Usuario de prueba creado en Firestore');
    
    // Tambi√©n crear uno para admin
    const adminUserData = {
      uid: auth.currentUser?.uid,
      email: auth.currentUser?.email,
      displayName: 'Roberto Mistatas',
      role: 'super_admin',
      isActive: true,
      createdAt: new Date(),
      createdBy: auth.currentUser?.uid,
      lastLogin: new Date()
    };
    
    await db.collection('userProfiles').doc(auth.currentUser?.uid).set(adminUserData);
    console.log('‚úÖ Perfil de super admin creado');
    
    console.log('üîÑ Recarga la p√°gina para ver los cambios');
    
  } catch (error) {
    console.error('‚ùå Error creando usuarios:', error);
  }
};

// Funci√≥n para limpiar datos de prueba
const cleanTestData = async () => {
  console.log('üßπ Limpiando datos de prueba...');
  
  try {
    const db = window.firebase?.firestore?.();
    await db.collection('userProfiles').doc('test-javiera-123').delete();
    console.log('‚úÖ Datos de prueba eliminados');
  } catch (error) {
    console.error('‚ùå Error limpiando:', error);
  }
};

// Hacer funciones disponibles globalmente
window.debugUserSystem = {
  diagnose: diagnoseUserSystem,
  createTestUser: createTestUser,
  cleanTestData: cleanTestData
};

// Ejecutar diagn√≥stico autom√°ticamente
console.log('üõ†Ô∏è HERRAMIENTAS DE DEBUGGING DISPONIBLES:');
console.log('debugUserSystem.diagnose() - Ejecutar diagn√≥stico completo');
console.log('debugUserSystem.createTestUser() - Crear usuarios de prueba');
console.log('debugUserSystem.cleanTestData() - Limpiar datos de prueba');
console.log('');
console.log('Ejecutando diagn√≥stico autom√°tico...');
diagnoseUserSystem();