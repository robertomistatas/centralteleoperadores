/**
 * üîç SCRIPT DE DIAGN√ìSTICO PARA CAROLINA REYES
 * Investiga por qu√© Carolina aparece como Teleoperadora cuando deber√≠a ser Administrador
 */

console.log('üïµÔ∏è DIAGN√ìSTICO CAROLINA REYES - Iniciando investigaci√≥n...');
console.log('='.repeat(70));

// Funci√≥n principal de diagn√≥stico
window.debugCarolinaProfile = async () => {
  try {
    console.log('üîç 1. VERIFICANDO AUTENTICACI√ìN ACTUAL...');
    
    // Verificar usuario autenticado
    const auth = window.firebase?.auth?.();
    const currentUser = auth?.currentUser;
    
    console.log('üë§ Usuario autenticado:', {
      email: currentUser?.email,
      uid: currentUser?.uid,
      displayName: currentUser?.displayName
    });
    
    if (!currentUser) {
      console.log('‚ùå No hay usuario autenticado. Inicia sesi√≥n para continuar.');
      return;
    }
    
    console.log('\nüìö 2. VERIFICANDO SERVICIO DE USUARIOS...');
    
    // Importar servicio
    const { userManagementService } = await import('./src/services/userManagementService.js');
    
    console.log('‚úÖ Servicio importado correctamente');
    
    console.log('\nüîç 3. BUSCANDO PERFIL DE CAROLINA EN FIRESTORE...');
    
    // Buscar Carolina por email
    const carolinaProfile = await userManagementService.getUserProfileByEmail('carolina@mistatas.com');
    
    console.log('üìÑ Resultado b√∫squeda Carolina:', carolinaProfile);
    
    if (!carolinaProfile) {
      console.log('‚ùå NO SE ENCONTR√ì PERFIL PARA CAROLINA');
      console.log('üí° Esto explica por qu√© aparece como teleoperadora (rol por defecto)');
      
      // Verificar si hay variaciones del email
      console.log('\nüîç Buscando variaciones del email...');
      const allUsers = await userManagementService.getAllUsers();
      console.log('üë• Total usuarios en sistema:', allUsers.length);
      
      const carolinaVariations = allUsers.filter(user => 
        user.email?.toLowerCase().includes('carolina') ||
        user.displayName?.toLowerCase().includes('carolina')
      );
      
      console.log('üîç Usuarios con "carolina" en el nombre/email:', carolinaVariations);
      
      return {
        found: false,
        variations: carolinaVariations,
        allUsers: allUsers.map(u => ({ email: u.email, role: u.role, displayName: u.displayName }))
      };
    }
    
    console.log('\n‚úÖ 4. PERFIL ENCONTRADO - ANALIZANDO DATOS...');
    
    console.log('üìä Datos del perfil:', {
      id: carolinaProfile.id,
      email: carolinaProfile.email,
      displayName: carolinaProfile.displayName,
      role: carolinaProfile.role,
      isActive: carolinaProfile.isActive,
      createdAt: carolinaProfile.createdAt,
      createdBy: carolinaProfile.createdBy
    });
    
    console.log('\nüîç 5. VERIFICANDO L√ìGICA DE USEPERMINSSIONS...');
    
    // Simular la l√≥gica de usePermissions
    if (carolinaProfile.role === 'admin') {
      console.log('‚úÖ PERFIL CORRECTO: Carolina tiene rol "admin"');
      console.log('ü§î El problema debe estar en la aplicaci√≥n del rol durante el login');
    } else {
      console.log('‚ùå PROBLEMA ENCONTRADO: Carolina NO tiene rol admin');
      console.log(`üéØ Rol actual: ${carolinaProfile.role}`);
      console.log('üîß SOLUCI√ìN: Actualizar el rol a "admin"');
    }
    
    return {
      found: true,
      profile: carolinaProfile,
      diagnosis: carolinaProfile.role === 'admin' ? 'Rol correcto, problema en aplicaci√≥n' : 'Rol incorrecto en BD'
    };
    
  } catch (error) {
    console.error('‚ùå ERROR EN DIAGN√ìSTICO:', error);
    return { error: error.message };
  }
};

// Funci√≥n para corregir el rol de Carolina
window.fixCarolinaRole = async () => {
  try {
    console.log('üîß CORRIGIENDO ROL DE CAROLINA...');
    
    const { userManagementService } = await import('./src/services/userManagementService.js');
    
    // Buscar Carolina
    const carolinaProfile = await userManagementService.getUserProfileByEmail('carolina@mistatas.com');
    
    if (!carolinaProfile) {
      console.log('‚ùå No se encontr√≥ perfil de Carolina para corregir');
      return false;
    }
    
    // Actualizar a admin
    await userManagementService.updateUser(carolinaProfile.id, {
      role: 'admin'
    });
    
    console.log('‚úÖ ROL CORREGIDO: Carolina ahora es administrador');
    console.log('üîÑ Recarga la p√°gina para ver los cambios');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå ERROR CORRIGIENDO ROL:', error);
    return false;
  }
};

console.log('\nüéØ FUNCIONES DISPONIBLES:');
console.log('‚Ä¢ window.debugCarolinaProfile() - Diagnostica el problema');
console.log('‚Ä¢ window.fixCarolinaRole() - Corrige el rol a admin');
console.log('\nEjecuta estas funciones en la consola del navegador.');